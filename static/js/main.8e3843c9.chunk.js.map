{"version":3,"sources":["Components/NavbarComponent.js","Components/XrayComponent.js","Components/Router.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","handleClick","route","console","log","navigate","Grid","container","className","alignItems","xs","onClick","Typography","variant","style","marginLeft","justify","padding","Button","size","color","marginRight","ButtonGroup","Component","Xray","Container","Router","this","Home","React","require","App","state","address","handleNav","bind","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iUAGqBA,E,kDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAEVC,YAAc,SAACC,GACXC,QAAQC,IAAI,UAAWF,GAEvB,EAAKF,MAAMK,SAASH,IANN,E,qDAQT,IAAD,OACJ,OACI,kBAACI,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,UACtB,kBAACF,EAAA,EAAD,CAAMC,WAAS,EAACE,WAAW,SAASC,GAAI,EAAGC,QAAS,kBAAM,EAAKV,YAAY,KACvE,kBAACW,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,CAACC,WAAW,OAA5C,gBAKJ,kBAACT,EAAA,EAAD,CAAMC,WAAS,EAACG,GAAI,EAAGM,QAAQ,WAAWF,MAAO,CAACG,QAAQ,IAC1D,kBAACC,EAAA,EAAD,CACIL,QAAQ,WACRM,KAAK,QACLC,MAAM,UACNT,QAAS,kBAAM,EAAKV,YAAY,IAChCa,MAAO,CAACO,YAAY,OALxB,gBASA,kBAACC,EAAA,EAAD,CAAaT,QAAQ,OAAOO,MAAM,UAAUZ,UAAU,UAAUM,MAAO,CAACO,YAAY,OAChF,kBAACH,EAAA,EAAD,mBACA,kBAACA,EAAA,EAAD,oBACA,kBAACA,EAAA,EAAD,uBACA,kBAACA,EAAA,EAAD,4B,GAhCgBK,a,QCArB,SAASC,IACpB,OACI,kBAACC,EAAA,EAAD,KACI,kBAACb,EAAA,EAAD,CAAYC,QAAQ,MAApB,Y,ICFSa,E,kDACjB,WAAY1B,GAAO,uCACTA,G,qDAIN,OADAG,QAAQC,IAAI,mBAAoBuB,KAAK3B,MAAME,OACnB,IAArByB,KAAK3B,MAAME,MAEN,kBAAC0B,EAAD,MAGgB,IAArBD,KAAK3B,MAAME,MAEN,kBAACsB,EAAD,WAFR,M,GAX4BK,IAAMN,WAmBnC,SAASK,IACZ,OACI,kBAACH,EAAA,EAAD,KACI,kBAACb,EAAA,EAAD,CAAYC,QAAQ,KAAKO,MAAM,WAA/B,sBCpBZU,EAAQ,I,IAEaC,E,kDACnB,WAAY/B,GAAO,IAAD,8BAChB,cAAMA,IACDgC,MAAM,CACTC,QAAQ,GAEV,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBALD,E,sDAORF,GACRN,KAAKS,SAAS,CAACH,QAASA,M,+BAMxB,OAFA9B,QAAQC,IAAI,YAAauB,KAAKK,MAAMC,SAGlC,yBAAKzB,UAAU,OACb,6BACE,kBAAC,EAAD,CAAQH,SAAUsB,KAAKO,aAEzB,kBAAC,EAAD,CAAQhC,MAAOyB,KAAKK,MAAMC,e,GApBDV,aCIbc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.8e3843c9.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Grid, Box, Button, ButtonGroup, Typography} from \"@material-ui/core\";\r\n\r\nexport default class Navbar extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    handleClick = (route) => {\r\n        console.log(\"route: \", route);\r\n        \r\n        this.props.navigate(route);\r\n    }\r\n    render(){\r\n        return(\r\n            <Grid container className=\"navbar\">\r\n                <Grid container alignItems=\"center\" xs={3} onClick={() => this.handleClick(1)}>\r\n                    <Typography variant=\"h5\" style={{marginLeft:\"3%\"}} >\r\n                        COVID-19 AI\r\n                    </Typography>\r\n                </Grid>\r\n\r\n                <Grid container xs={9} justify=\"flex-end\" style={{padding:3}}>\r\n                <Button \r\n                    variant=\"outlined\" \r\n                    size=\"small\" \r\n                    color=\"primary\"  \r\n                    onClick={() => this.handleClick(2)} \r\n                    style={{marginRight:\"3%\"}}\r\n                    >\r\n                    Submit X-Ray\r\n                </Button>\r\n                <ButtonGroup variant=\"text\" color=\"inherit\" className=\"buttons\" style={{marginRight:\"3%\"}}>\r\n                    <Button>Guidelines</Button>\r\n                    <Button>Precautions</Button>\r\n                    <Button>Self-Diagnosis</Button>\r\n                    <Button>Team Members</Button>\r\n                </ButtonGroup>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        )\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport { Typography, Container } from \"@material-ui/core\";\r\n\r\nexport default function Xray(){\r\n    return(\r\n        <Container>\r\n            <Typography variant=\"h3\">\r\n                Welcome\r\n            </Typography>\r\n        </Container>\r\n    )\r\n}","import React from 'react';\r\nimport Xray from \"./XrayComponent\";\r\nimport { Container, Typography } from '@material-ui/core';\r\n\r\nexport default class Router extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render(){\r\n        console.log(\"recieved route: \", this.props.route)\r\n        if(this.props.route === 0){\r\n            return(\r\n                <Home/>\r\n            );\r\n        }\r\n        if(this.props.route === 2){\r\n            return(\r\n                <Xray/>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport function Home() {\r\n    return(\r\n        <Container>\r\n            <Typography variant=\"h5\" color=\"primary\">\r\n                Content goes here\r\n            </Typography>\r\n        </Container>\r\n    )\r\n}","import React, {Component} from 'react';\nimport './App.css';\nimport Navbar from './Components/NavbarComponent'\nimport { Container } from '@material-ui/core';\nimport Router from \"./Components/Router\";\n\nrequire('typeface-roboto')\n\nexport default class App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      address:0\n    }\n    this.handleNav = this.handleNav.bind(this);\n  }\n  handleNav(address){\n    this.setState({address: address})\n  }\n\n  render(){\n    console.log(\"address: \", this.state.address);\n    \n    return (\n      <div className=\"App\">\n        <div>\n          <Navbar navigate={this.handleNav}/>\n        </div>\n        <Router route={this.state.address}/>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}